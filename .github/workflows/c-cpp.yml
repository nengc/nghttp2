name: Windows Build and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

env:
  VCPKG_ROOT: 'C:\vcpkg'
  ARTIFACT_NAME: nghttp2-windows-build
  BUILD_DIR: build

jobs:
  build-windows:
    strategy:
      matrix:
        arch: [x64]  # 支持 x86 或 x64
        configuration: [Release]  # 支持 Debug 或 Release
        include:
        - arch: x64
          triplet: x64-windows
          platform: x64
        - arch: x86
          triplet: x86-windows
          platform: Win32

    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'nghttp2'

    # 修复点：使用官方方法安装 vcpkg
    - name: Install vcpkg
      run: |
        # 安装必要的构建工具
        choco install git -y
        
        # 使用官方方法安装 vcpkg
        Set-Location C:\
        git clone https://github.com/microsoft/vcpkg.git
        C:\vcpkg\bootstrap-vcpkg.bat
        
        # 设置环境变量
        Add-Content $env:GITHUB_ENV "VCPKG_ROOT=C:\\vcpkg"
        Add-Content $env:GITHUB_PATH "C:\\vcpkg"

    # 添加 vcpkg 缓存
    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: ${{ env.VCPKG_ROOT }}\installed
        key: ${{ runner.os }}-vcpkg-${{ matrix.triplet }}-${{ hashFiles('nghttp2/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-${{ matrix.triplet }}

    # 修复点：使用直接从 GitHub 获取的依赖
    - name: Install dependencies
      run: |
        # 使用直接安装方法替代可能出错的仓库
        & "$env:VCPKG_ROOT/vcpkg" install openssl --triplet ${{ matrix.triplet }}
        & "$env:VCPKG_ROOT/vcpkg" install zlib --triplet ${{ matrix.triplet }}
        & "$env:VCPKG_ROOT/vcpkg" install libevent --triplet ${{ matrix.triplet }}
        & "$env:VCPKG_ROOT/vcpkg" install libxml2 --triplet ${{ matrix.triplet }}
        & "$env:VCPKG_ROOT/vcpkg" install brotli --triplet ${{ matrix.triplet }}
        & "$env:VCPKG_ROOT/vcpkg" install jansson --triplet ${{ matrix.triplet }}
        & "$env:VCPKG_ROOT/vcpkg" install c-ares --triplet ${{ matrix.triplet }}

    - name: Configure CMake
      run: |
        cd nghttp2
        cmake -B $env:BUILD_DIR `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} `
          -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} `
          -DCMAKE_GENERATOR_PLATFORM=${{ matrix.platform }} `
          -DBUILD_STATIC_LIBS=ON `
          -DWITH_ASIO=ON `
          -DWITH_APP=ON `
          -DWITH_EXAMPLES=ON

    - name: Build project
      run: |
        cd nghttp2
        cmake --build $env:BUILD_DIR --config ${{ matrix.configuration }} --parallel

    - name: Create artifacts
      run: |
        $version = (Get-Content nghttp2/CMakeLists.txt | `
            Select-String -Pattern "project$.* VERSION (\d+\.\d+\.\d+)$" | `
            ForEach-Object { $_.Matches.Groups[1].Value })
            
        if (-not $version) { $version = "unknown" }

        $artifactDir = "nghttp2-$version-${{ matrix.arch }}-${{ matrix.configuration }}"
        mkdir $artifactDir

        # 复制主要二进制文件
        Copy-Item -Path "nghttp2/$env:BUILD_DIR/${{ matrix.configuration }}/nghttp.exe" -Destination "$artifactDir/"
        Copy-Item -Path "nghttp2/$env:BUILD_DIR/${{ matrix.configuration }}/nghttpd.exe" -Destination "$artifactDir/"
        Copy-Item -Path "nghttp2/$env:BUILD_DIR/${{ matrix.configuration }}/nghttpx.exe" -Destination "$artifactDir/"

        # 复制DLL依赖项
        $dlls = Get-ChildItem "$env:VCPKG_ROOT/installed/${{ matrix.triplet }}/bin/*.dll"
        foreach ($dll in $dlls) {
            Copy-Item $dll.FullName -Destination $artifactDir/
        }

        # 创建压缩包
        Compress-Archive -Path $artifactDir -DestinationPath "$artifactDir.zip"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nghttp2-${{ matrix.arch }}-${{ matrix.configuration }}
        path: |
          nghttp2-*-${{ matrix.arch }}-${{ matrix.configuration }}.zip
        retention-days: 7

  create-release:
    needs: build-windows
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: 'nghttp2-*.zip'

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "Windows Build - ${{ github.ref_name }}"
        tag_name: ${{ github.ref_name }}
        body: |
          Pre-built Windows binaries for ${{ github.ref_name }}
          Includes:
          - nghttp.exe
          - nhttpd.exe
          - nghttpx.exe
        files: |
          artifacts/*.zip
        draft: false
        prerelease: false
